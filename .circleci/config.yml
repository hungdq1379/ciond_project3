version: 2.1
orbs:
  aws-cli: circleci/aws-cli@2.0.0
  aws-s3: circleci/aws-s3@1.0.9
  slack: circleci/slack@4.1
  node: circleci/node@4.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID. 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
      # - run:
      #     name: Destroy environments
      #     when: on_success
      #     command: |
      #       aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      #       aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.  
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure https://kvdb.io/64xvxrRXspfWtdyJZVPqvf/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if [[ $SUCCESS == 1 ]]
           
            then
              #  cd ~/project/backend
              #  npm install
              #  Add revert code here. You can find this in the Getting Started section.
              cd ~/project/backend
              npm install
              npm run migration:revert
            #  exit 1
            fi
         
  aws_configure_credential:
    steps:
      - run:
          name: Create Credential Configuration AWS
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
             #   aws configure set aws_session_token "" --profile default
            aws configure set aws_session_token $AWS_SESSION_TOKEN
            aws configure set region $AWS_DEFAULT_REGION
 
  aws_cli_intsall:
    steps:
      - run:
          name: Install aws-cli
          command: |
            sudo apt install curl
            sudo apt install unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
           
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
           
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
 
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end test
          command: |
            cd frontend
            npm install
            npm run test
          
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run Back-end test
          command: |
            cd backend
            npm install
            npm run test
          
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0 
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
              # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical
  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0 
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force  
            
  deploy-infrastructure-cloudfront:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - aws_configure_credential
      - run: 
          name: Deploy Infrastructure for CloudFront
          command: |
            cd .circleci/files
              #aws cloudformation delete-stack --stack-name "InitialStack"
            aws cloudformation deploy \
                --template-file cloudfront.yml \
                --stack-name "CloudFront-${CIRCLE_WORKFLOW_ID:0:7}-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}-${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-infrastructure-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - aws_configure_credential
      - run:
          name: Install tar and gzip
          command: |
            yum install -y tar gzip
      - run:
          name: Deploy Infrastructure for Backend
          command: |
            # Use the workflow id to mark your CloudFormation stacks so that you can reference them later on (ex: rollback). 
            aws cloudformation deploy \
               --template-file .circleci/files/backend.yml \
               --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                 --tags project=udapeople
          
         

  deploy-infrastructure-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - aws_configure_credential
      - run: 
          name: Deploy Infrastructure for FrontEnd
          command: |
           # Use the workflow id to mark your CloudFormation stacks so that you can reference them later on (ex: rollback). 
            aws cloudformation deploy \
               --template-file .circleci/files/frontend.yml \
               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      

  create-inventory-file:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: isntall tar
          command: | 
            yum install -y tar gzip
      - aws_configure_credential
      - run:
          name: Create inventory file
          command: |
            cd .circleci/ansible
            touch inventory.txt
            echo [web] > inventory.txt
            aws ec2 describe-instances  --query 'Reservations[*].Instances[*].PublicIpAddress'  --filters "Name=tag:project,Values=udapeople" --output text >> inventory.txt
            cat inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt   
                        
  configure-infrastructure: 
    docker:
      - image: python:3.11-rc-alpine
   
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d6:4d:9b:cc:82:32:6f:d7:11:5e:23:9c:d1:aa:4b:b0"] # You can get this ID in the section where you registered the SSH Key
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible 
            apk add --no-cache aws-cli
            aws --version
      - aws_configure_credential 
      - attach_workspace:
          at: .   
      - run:
          name: Configure server Ansible 
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

  run-migrations:
    docker:
      - image: circleci/node:13.8.0 
      
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - aws_cli_intsall
      - aws_configure_credential 
      - run:
          name: Run migrations
          command: |
              cd backend
              cat .env
              npm install
           
              npm run migrations > migrations_dump.txt
              cat migrations_dump.txt

      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                  # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
                  curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi 
      - destroy-environment
      

  deploy-frontend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - aws_cli_intsall
      - aws_configure_credential
      - run:
          name: Get backend URL
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:project,Values=udapeople" --query "Reservations[*].Instances[].PublicIpAddress" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: deploy frontend objects
          command: |
            cd frontend
            cat .env
            npm install
            sudo npm install webpack
            npm run build
            # tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist  
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations  

  deploy-backend:
    docker: 
      - image: python:3.11-rc-alpine
    steps:
      - checkout 
      - add_ssh_keys:
          fingerprints: ["d6:4d:9b:cc:82:32:6f:d7:11:5e:23:9c:d1:aa:4b:b0"] # You can get this ID in the section where you registered the SSH Key
      - run: 
          name: Install independencies
          command: |
            apk add --update ansible tar npm curl
            apk add --no-cache aws-cli
      - attach_workspace:
          at: .        
      - run:
          name: Deploy Backend
          command: |
            cd backend
            npm i
            npm run build
              # npm audit fix --force
            cd ..
              # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker: 
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - run: 
          name: Install dependencies
          command: |
            apk add --update ansible curl nodejs npm
            apk add --no-cache aws-cli
      
      - run:
          name: Frontend smoke test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi
         
      - run:
          name: Backend smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:project,Values=udapeople" --query "Reservations[*].Instances[].PublicIpAddress" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - destroy-environment
      - revert-migrations
    
  promotion-phase:
    docker: 
      - image: amazon/aws-cli
    steps:
      - checkout 
      - aws_configure_credential
      - run:
          name: Deploy Infrastructure CloudFront
          command: | 
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name "udapeople-cloudfront-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
           
      
  cleanup-phase:
    docker: 
      - image: amazon/aws-cli
    steps:
      - aws_configure_credential
      - run:
          name: Fetch OldStack ID 
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo OldWorkflowID: "${OldWorkflowID}"
            echo Stack names: "${STACKS[@]}"
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" == "${OldWorkflowID}" ]]
            then
              # your code goes here
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              # your code goes here
              echo "nothing to do"
            fi
  destroy-environments:
    docker: 
      - image: amazon/aws-cli
    steps:
      - destroy-environment

  deploy-infrastructure-prometheus:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - aws_configure_credential
      - run:
          name: Install tar and gzip
          command: |
            yum install -y tar gzip
      - run:
          name: Deploy Infrastructure for Prometheus
          command: |
            # Use the workflow id to mark your CloudFormation stacks so that you can reference them later on (ex: rollback). 
            aws cloudformation deploy \
               --template-file .circleci/files/backend.yml \
               --stack-name "prometheus-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                 --tags project=prometheus

  deploy-infrastructure-node-exporter:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - aws_configure_credential
      - run:
          name: Install tar and gzip
          command: |
            yum install -y tar gzip
      - run:
          name: Deploy Infrastructure for Node Exporter
          command: |
            # Use the workflow id to mark your CloudFormation stacks so that you can reference them later on (ex: rollback). 
            aws cloudformation deploy \
               --template-file .circleci/files/backend.yml \
               --stack-name "node-exporter-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                 --tags project=node-exporter

workflows:
  default:
    jobs:
      # - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      - test-backend:
          requires: [build-backend] 
      # - scan-frontend:
          # requires: [build-frontend]
      - scan-backend:
          requires: [build-backend] 
      # - deploy-infrastructure-cloudfront:
          # requires: [scan-backend]
      - deploy-infrastructure-backend:
          requires: [scan-backend]
      - deploy-infrastructure-frontend:
          requires: [scan-backend]
      # - deploy-infrastructure-prometheus:
          # requires: [scan-backend]
      # - deploy-infrastructure-node-exporter:
          # requires: [scan-backend]
    
      - create-inventory-file:
          requires: [deploy-infrastructure-frontend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [create-inventory-file]
      - run-migrations:
          requires: [scan-backend]
      - deploy-frontend:
          requires: [configure-infrastructure]
      - deploy-backend:
          requires: [configure-infrastructure]
      - smoke-test:
          requires: [deploy-frontend,deploy-backend]
      - promotion-phase:
          requires: [smoke-test]
          # requires: [deploy-frontend,deploy-backend]
      # - cleanup-phase:
          # requires: [promotion-phase]
     
