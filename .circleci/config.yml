version: 2.1
orbs:
  aws-cli: circleci/aws-cli@2.0.0
  aws-s3: circleci/aws-s3@1.0.9
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID. 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm --recursive s3://udapeople-kk1j287dhjppmz439
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.  
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
              #  cd ~/project/backend
              #  npm install
              #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
         
  aws_configure_credential:
    steps:
      - run:
          name: Create Credential Configuration AWS
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
             #   aws configure set aws_session_token "" --profile default
            aws configure set aws_session_token $AWS_SESSION_TOKEN
            aws configure set region $AWS_DEFAULT_REGION
 
  aws_cli_intsall:
    steps:
      - run:
          name: Install aws-cli
          command: |
            sudo apt install curl
            sudo apt install unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
           
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run start&
           
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end test
          command: |
            cd frontend
            npm install
            npm run test
          
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run Back-end test
          command: |
            cd backend
            npm install
            npm run test
          
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0 
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm install
              # Do not use the --force option along with the command below in your local
            npm audit fix --audit-level=critical --force
             # npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0 
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
             # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
             # npm audit --audit-level=critical
  deploy-infrastructure-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - aws_configure_credential
      - run:
          name: Install tar and gzip
          command: |
            yum install -y tar gzip
      - run:
          name: Deploy Infrastructure for Backend
          command: |
           # Use the workflow id to mark your CloudFormation stacks so that you can reference them later on (ex: rollback). 
            aws cloudformation deploy \
               --template-file .circleci/files/backend.yml \
               --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                 --tags project=udapeople
            aws cloudformation describe-stack-events --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
     

  deploy-infrastructure-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - aws_configure_credential
      - run: 
          name: Deploy Infrastructure for FrontEnd
          command: |
           # Use the workflow id to mark your CloudFormation stacks so that you can reference them later on (ex: rollback). 
            aws cloudformation deploy \
               --template-file .circleci/files/frontend.yml \
               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                 --tags project=udapeople
     
  destroy-environment:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - aws_configure_credential
      - destroy-environment

  create-inventory-file:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - aws_configure_credential
      - run:
          name: Create inventory file
          command: |
            cd .circleci/ansible
            touch inventory
            echo [web] > inventory
            aws ec2 describe-instances  --query 'Reservations[*].Instances[*].PublicIpAddress'  --filters "Name=tag:Project,Values=Udacity" --output text >> inventory
            cat inventory
           
  configure-infrastructure: 
    docker:
      - image: python:3.7-alpine3.11
    #  - image: amazon/aws-cli
    steps:
      - checkout
    #  - aws_cli_intsall
      # - aws_configure_credential
      - add_ssh_keys:
          fingerprints: ["26:72:38:f9:00:f6:87:2c:d9:ad:eb:90:62:c4:27:55"] # You can get this ID in the section where you registered the SSH Key
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible 
             # apk add --no-cache aws-cli
            #apk update \
            #  && apk --no-cache add curl \
            #  && apk --no-cache add unzip \
            #   && curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" \
            #  && unzip awscliv2.zip \
            #   && ./aws/install
            sudo python3 -m pip install --upgrade pip
            python3 -m pip install awscli
            python3 -m pip install awscliv2
            ~/.local/bin/awscliv2 --install
            echo 'export PATH=$PATH:~/.local/bin' >>~/.bashrc
            echo 'alias aws="awsv2"' >>~/.bashrc
            source ~/.bashrc
            aws --version
            
      - run:
          name: Configure server Ansible 
          command: |
            cd .circleci/ansible
              touch inventory
              echo [web] > inventory
              aws ec2 describe-instances  --query 'Reservations[*].Instances[*].PublicIpAddress'  --filters "Name=tag:Project,Values=Udacity" --output text >> inventory
            cat inventory.txt
            # ansible-playbook -i inventory.txt deploy-backend.yml
            ansible-playbook -i inventory.txt configure-server.yml

  configure-infrastructure-ansible: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - aws_configure_credential
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
              touch inventory
              echo [web] > inventory
              aws ec2 describe-instances  --query 'Reservations[*].Instances[*].PublicIpAddress'  --filters "Name=tag:Project,Values=Udacity" --output text >> inventory
            cat inventory.txt
            # ansible-playbook -i inventory.txt deploy-backend.yml
            ansible-playbook -i inventory.txt configure-server.yml

          
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend] 
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend] 
      - deploy-infrastructure-backend:
          requires: [build-frontend,build-backend,scan-frontend,scan-backend]
      - deploy-infrastructure-frontend:
          requires: [build-frontend,build-backend,scan-frontend,scan-backend]
      - destroy-environment:
          requires: [build-frontend,build-backend,scan-frontend,scan-backend]
      - create-inventory-file:
          requires: [build-frontend,build-backend,scan-frontend,scan-backend]
      - configure-infrastructure:
          requires: [create-inventory-file]
    #  - configure-infrastructure-ansible:
    #      requires: [configure-infrastructure]
      